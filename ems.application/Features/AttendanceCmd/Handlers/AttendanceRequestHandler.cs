using AutoMapper;using ems.application.DTOs.UserLogin;using ems.application.Features.UserLoginAndDashboardCmd.Commands;using ems.application.Interfaces.IRepositories;using ems.application.Interfaces.ITokenService;using ems.application.Interfaces;using ems.application.Wrappers;using MediatR;using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;using ems.application.Constants;using FluentValidation;using ems.application.DTOs.BasicAndRoleBaseMenuDTO;using Microsoft.Extensions.Logging;using ems.application.DTOs.AttendanceDTO;using ems.application.Features.AttendanceCmd.Command;using ems.domain.Entity;using static System.Runtime.InteropServices.JavaScript.JSType;namespace ems.application.Features.AttendanceCmd.Handlers{    public class AttendanceRequestHandler : IRequestHandler<AttendanceCommand, ApiResponse<AttendanceResponseDTO>>    {        private readonly IAttendanceRepository attendanceRepository;        private readonly IMapper mapper;        private readonly IUnitOfWork unitOfWork;        public AttendanceRequestHandler(IAttendanceRepository attendanceRepository, IMapper mapper, IUnitOfWork unitOfWork)        {            this.attendanceRepository = attendanceRepository;            this.mapper = mapper;            this.unitOfWork = unitOfWork;        }        public async Task<ApiResponse<AttendanceResponseDTO>> Handle(AttendanceCommand? request, CancellationToken cancellationToken)        {            // Log request details            //  _logger?.LogInformation("Processing attendance for EmployeeId: {EmployeeId} on {Date}.",            //  request.AttendanceRequestDTO.EmployeeId, request.AttendanceRequestDTO.AttendanceDate);            UserAttendanceSetting userAttendanceSettings = await attendanceRepository.GetUserAttendanceSettingByIdAsync(request.AttendanceRequestDTO);                       // Fetch user attendance settings                       if (userAttendanceSettings == null)            {                return new ApiResponse<AttendanceResponseDTO>(null, ConstantValues.userMissingAttendanceProfile, ConstantValues.fail);                                // _logger?.LogWarning("No attendance settings found for EmployeeId: {EmployeeId}.",                //     request.AttendanceRequestDTO.EmployeeId);                // throw new InvalidOperationException("Attendance settings not configured for this employee.");            }            // Validate if attendance can be marked based on settings            if (!userAttendanceSettings.IsAllowed)            {                // _logger?.LogWarning("Attendance not allowed for EmployeeId: {EmployeeId}.",                //    request.AttendanceRequestDTO.EmployeeId);                return new ApiResponse<AttendanceResponseDTO>(null, ConstantValues.attendanceNotAllowed, ConstantValues.fail);                // return new AttendanceResponseDTO                // {                // Success = false,                // Message = "."                // };            }            // Log geofencing validation if enabled            if (userAttendanceSettings.IsGeofenceEnabled)            {                var isWithinGeofence = ValidateGeofence(request.AttendanceRequestDTO, userAttendanceSettings);                if (!isWithinGeofence)                {                  //  _logger?.LogWarning("EmployeeId: {EmployeeId} is outside the geofence.",                   //     request.AttendanceRequestDTO.EmployeeId);                  //  return new AttendanceResponseDTO                    {                     //   Success = false,                      //  Message = "You are outside the geofence area and cannot mark attendance."                    };                    return new ApiResponse<AttendanceResponseDTO>(null, ConstantValues.outOfGeoFence, ConstantValues.fail);                }            }            // Add employee attendance            var attendanceResult = await attendanceRepository.AddEmployeeAttendanceAsync(request.AttendanceRequestDTO);            if (attendanceResult)            {             //   _logger?.LogInformation("Attendance successfully marked for EmployeeId: {EmployeeId}.",               //     request.AttendanceRequestDTO.EmployeeId);                var data = new AttendanceResponseDTO                {                     Status = true,                     Message = ConstantValues.successMessage                };                return new ApiResponse<AttendanceResponseDTO>(data, ConstantValues.attendanceSucessful, ConstantValues.fail);            }            else            {              //  _logger?.LogWarning("Failed to mark attendance for EmployeeId: {EmployeeId}.",              //      request.AttendanceRequestDTO.EmployeeId);              //  return new AttendanceResponseDTO                {                    //    Success = false,                    //    Message = "Failed to mark attendance. Please try again."                };                return new ApiResponse<AttendanceResponseDTO>(null, ConstantValues.attendancefail, ConstantValues.fail);            }         }        private double CalculateDistance(decimal lat1, decimal lon1, decimal lat2, decimal lon2)        {            try            {                // Convert decimal degrees to radians                double Radians(double degrees) => degrees * Math.PI / 180;                // Earth's radius in kilometers (use 6371 for kilometers, 3958.8 for miles)                const double EarthRadiusKm = 6371;                // Convert latitude and longitude from decimal degrees to radians                var lat1Rad = Radians((double)lat1);                var lon1Rad = Radians((double)lon1);                var lat2Rad = Radians((double)lat2);                var lon2Rad = Radians((double)lon2);                // Calculate the differences                var deltaLat = lat2Rad - lat1Rad;                var deltaLon = lon2Rad - lon1Rad;                // Haversine formula                var a = Math.Sin(deltaLat / 2) * Math.Sin(deltaLat / 2) +                        Math.Cos(lat1Rad) * Math.Cos(lat2Rad) *                        Math.Sin(deltaLon / 2) * Math.Sin(deltaLon / 2);                var c = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1 - a));                // Calculate distance                var distance = EarthRadiusKm * c;                // Log the calculated distance             //   _logger?.LogInformation("Calculated distance: {Distance} km.", distance);                return distance;            }            catch (Exception ex)            {               // _logger?.LogError(ex, "Error occurred while calculating distance.");                return -1; // Return -1 or any invalid value to indicate an error            }        }        private bool ValidateGeofence(AttendanceRequestDTO attendanceRequest, UserAttendanceSetting userSettings)        {            if (attendanceRequest.Latitude.HasValue && attendanceRequest.Longitude.HasValue &&                userSettings.GeofenceLatitude.HasValue && userSettings.GeofenceLongitude.HasValue)            {                var distance = CalculateDistance(                    attendanceRequest.Latitude.Value,                    attendanceRequest.Longitude.Value,                    userSettings.GeofenceLatitude.Value,                    userSettings.GeofenceLongitude.Value);                const double GeofenceRadiusKm = 1.0; // Example: 1 km geofence radius                return distance <= GeofenceRadiusKm;            }            return false;        }    }}